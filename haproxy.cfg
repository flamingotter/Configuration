global
  log /dev/log local0
  log /dev/log local1 notice
  daemon
  maxconn 1024
  #log 127.0.0.1 local0 debug
  nbproc 1

defaults
  log global
  mode http
  option httplog
  option dontlognull
  timeout connect 5000
  timeout client  50000
  timeout server  50000
  option redispatch
  option forwardfor
  option http-server-close
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http

# redirect http requests to https
frontend http-in
  bind *:80

  # Test URI to see if its a letsencrypt request
  acl letsencrypt-acl path_beg /.well-known/acme-challenge/
  use_backend letsencrypt-backend if letsencrypt-acl

  rspadd X-Forwarded-Host:\ http:\\\test.flamingotter.com
  #rspadd X-Forwarded-Host:\ http:\\\unifi.flamingotter.com
  redirect scheme https code 301 if !{ ssl_fc }

frontend https-in
  bind *:443 ssl crt /docker/haproxy/test.flamingotter.com.pem
  rspadd X-Forwarded-Host:\ https:\\\\test.flamingotter.com
  #rspadd X-Forwarded-Host:\ https:\\\\unifi.flamingotter.com
  rspadd Strict-Transport-Security:\ max-age=31536000

  # Define hosts
  acl host_ha hdr(host) -i test.flamingotter.com
  use_backend ha if host_ha

  #acl host_unifi hdr(host) -i unifi.flamingotter.com
  #use_backend unifi if host_unifi


backend letsencrypt-backend
  server letsencrypt 172.31.86.66:8888

backend ha
  server ha01 172.31.86.66:8123

backend unifi
  server unifi01 172.31.86.66:9000

listen stats # Define a listen section called "stats"
  bind :9000 # Listen on localhost:9000
  mode http
  stats enable  # Enable stats page
  stats hide-version  # Hide HAProxy version
  stats realm Haproxy\ Statistics  # Title text for popup window
  stats uri /haproxy_stats  # Stats URI
  stats auth admin:admin  # Authentication credentials
